name: Build and Release gfr

on:
  push:
    tags:
      - 'v*'
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy
      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2
      - name: Check formatting
        run: cargo fmt --all -- --check
      - name: Run clippy
        run: cargo clippy --all-targets --all-features -- -D warnings
      - name: Run tests
        run: cargo test --all

  build:
    name: Build gfr for ${{ matrix.target }}
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ${{ matrix.os }}
    needs: test
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            name: gfr-Linux-x86_64
            cross: false
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            name: gfr-Linux-aarch64
            cross: true
          - target: x86_64-apple-darwin
            os: macos-13
            name: gfr-Darwin-x86_64
            cross: false
          - target: aarch64-apple-darwin
            os: macos-latest
            name: gfr-Darwin-aarch64
            cross: false
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            name: gfr-Windows-x86_64.exe
            cross: false
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2
        with:
          key: gfr-${{ matrix.target }}

      - name: Install Linux dependencies
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config build-essential

      - name: Install cross
        if: matrix.cross
        run: cargo install cross --git https://github.com/cross-rs/cross --locked

      - name: Build binary (cross)
        if: matrix.cross
        run: cross build --release --target ${{ matrix.target }}

      - name: Build binary (native)
        if: matrix.cross == false
        run: cargo build --release --target ${{ matrix.target }}
      # ----------------------------------------------------

      - name: Strip binary (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          if [[ "${{ matrix.target }}" == "aarch64-unknown-linux-gnu" ]]; then
            if command -v aarch64-linux-gnu-strip >/dev/null 2>&1; then
              aarch64-linux-gnu-strip target/${{ matrix.target }}/release/gfr
            fi
          else
            if command -v strip >/dev/null 2>&1; then
              strip target/${{ matrix.target }}/release/gfr
            fi
          fi
      - name: Prepare binary (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          mkdir -p dist
          cp target/${{ matrix.target }}/release/gfr dist/${{ matrix.name }}
      - name: Prepare binary (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          mkdir dist
          cp target/${{ matrix.target }}/release/gfr.exe dist/${{ matrix.name }}
      - name: Calculate SHA256
        run: |
          cd dist
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            certutil -hashfile ${{ matrix.name }} SHA256 > ${{ matrix.name }}.sha256
            grep -v "SHA256" ${{ matrix.name }}.sha256 | grep -v "CertUtil" | tr -d '\r\n ' > temp.sha256
            echo "  ${{ matrix.name }}" >> temp.sha256
            mv temp.sha256 ${{ matrix.name }}.sha256
          elif [[ "${{ matrix.os }}" == macos* ]]; then
            shasum -a 256 ${{ matrix.name }} > ${{ matrix.name }}.sha256
          else
            sha256sum ${{ matrix.name }} > ${{ matrix.name }}.sha256
          fi
        shell: bash
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.name }}
          path: |
            dist/${{ matrix.name }}
            dist/${{ matrix.name }}.sha256

  release:
    name: Create Release
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    needs: [build]
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      - name: Prepare release assets
        run: |
          mkdir -p release-assets
          find artifacts -type f \( -name "gfr-*" -o -name "*.sha256" \) -exec cp {} release-assets/ \;
          ls -la release-assets/
      - name: Extract release notes
        id: extract-notes
        run: |
          if [[ -f CHANGELOG.md ]]; then
            VERSION=${GITHUB_REF#refs/tags/v}
            # Try multiple patterns for changelog section headers
            awk "/^## \\[?v?${VERSION}\\]?$|^## \\[?\"?v?${VERSION}\"?\\]?$/{flag=1; next} /^## /{flag=0} flag" CHANGELOG.md > release-notes.md
          fi
          if [[ ! -s release-notes.md ]]; then
            echo "# gfr ${GITHUB_REF#refs/tags/}" > release-notes.md
            echo "" >> release-notes.md
            echo "A blazingly-fast, Rust-powered tool for finding patterns in code using regular expressions." >> release-notes.md
            echo "" >> release-notes.md
            echo "## Downloads" >> release-notes.md
            echo "" >> release-notes.md
            echo "| Platform | Architecture | Binary |" >> release-notes.md
            echo "|----------|--------------|--------|" >> release-notes.md
            echo "| Linux    | x86_64       | gfr-Linux-x86_64 |" >> release-notes.md
            echo "| Linux    | aarch64      | gfr-Linux-aarch64 |" >> release-notes.md
            echo "| macOS    | x86_64       | gfr-Darwin-x86_64 |" >> release-notes.md
            echo "| macOS    | aarch64      | gfr-Darwin-aarch64 |" >> release-notes.md
            echo "| Windows  | x86_64       | gfr-Windows-x86_64.exe |" >> release-notes.md
            echo "" >> release-notes.md
            echo "## Installation" >> release-notes.md
            echo "" >> release-notes.md
            echo "1. Download the appropriate binary for your platform from the assets below" >> release-notes.md
            echo "2. Make the binary executable (Unix): \`chmod +x gfr-*\`" >> release-notes.md
            echo "3. Move to a directory in your PATH: \`mv gfr-* /usr/local/bin/gfr\`" >> release-notes.md
            echo "" >> release-notes.md
            echo "## SHA256 Checksums" >> release-notes.md
            echo "" >> release-notes.md
            echo "Verify the integrity of your download:" >> release-notes.md
            echo '```' >> release-notes.md
            if ls release-assets/*.sha256 1> /dev/null 2>&1; then
              cat release-assets/*.sha256
            else
              echo "No checksums available"
            fi >> release-notes.md
            echo '```' >> release-notes.md
          fi
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: release-assets/*
          body_path: release-notes.md
          draft: false
          prerelease: ${{ contains(github.ref, '-') }}
          generate_release_notes: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  cleanup:
    name: Cleanup
    if: always() && startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    needs: release
    permissions:
      actions: write
    steps:
      - name: Delete artifacts
        uses: geekyeggo/delete-artifact@v4
        with:
          name: |
            gfr-Linux-x86_64
            gfr-Linux-aarch64
            gfr-Darwin-x86_64
            gfr-Darwin-aarch64
            gfr-Windows-x86_64.exe